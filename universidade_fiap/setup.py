#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configura√ß√£o inicial do projeto
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica a vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")
    return True

def check_java():
    """Verifica se o Java est√° instalado"""
    try:
        result = subprocess.run(['java', '-version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Java detectado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå Java n√£o encontrado!")
    print("üí° Instale o Java 17+ para executar o Spring Boot")
    return False

def check_maven():
    """Verifica se o Maven est√° dispon√≠vel"""
    try:
        result = subprocess.run(['mvn', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Maven detectado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ö†Ô∏è Maven n√£o encontrado, mas o projeto tem mvnw")
    return True

def install_python_dependencies():
    """Instala as depend√™ncias Python"""
    print("üîÑ Instalando depend√™ncias Python...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        print("‚úÖ Depend√™ncias Python instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias Python: {e}")
        return False

def download_yolo_files():
    """Baixa os arquivos YOLO"""
    print("üîÑ Baixando arquivos YOLO...")
    try:
        subprocess.run([sys.executable, 'download_yolo.py'], check=True)
        print("‚úÖ Arquivos YOLO baixados")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao baixar arquivos YOLO: {e}")
        return False

def check_database_connection():
    """Verifica conex√£o com o banco de dados"""
    print("üîÑ Verificando conex√£o com MySQL...")
    try:
        import pymysql
        connection = pymysql.connect(
            host='localhost',
            user='root',
            password='230205',
            database='trackzone_mvc2'
        )
        connection.close()
        print("‚úÖ Conex√£o com MySQL OK")
        return True
    except ImportError:
        print("‚ö†Ô∏è PyMySQL n√£o instalado, pulando verifica√ß√£o do banco")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao conectar com MySQL: {e}")
        print("üí° Certifique-se que o MySQL est√° rodando e a senha est√° correta")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    dirs = ['logs', 'temp']
    for dir_name in dirs:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            print(f"üìÅ Diret√≥rio criado: {dir_name}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configura√ß√£o do Projeto Mottu")
    print("=" * 50)
    
    # Verifica√ß√µes b√°sicas
    checks = [
        ("Python 3.8+", check_python_version),
        ("Java", check_java),
        ("Maven", check_maven),
    ]
    
    all_ok = True
    for name, check_func in checks:
        if not check_func():
            all_ok = False
    
    if not all_ok:
        print("\n‚ùå Algumas verifica√ß√µes falharam. Corrija os problemas antes de continuar.")
        return
    
    # Instala√ß√£o de depend√™ncias
    print("\nüì¶ Instalando depend√™ncias...")
    if not install_python_dependencies():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias Python")
        return
    
    # Download dos arquivos YOLO
    print("\nüì• Baixando arquivos YOLO...")
    if not download_yolo_files():
        print("‚ö†Ô∏è Falha no download dos arquivos YOLO")
        print("üí° Execute manualmente: python download_yolo.py")
    
    # Verifica√ß√£o do banco
    print("\nüóÑÔ∏è Verificando banco de dados...")
    check_database_connection()
    
    # Cria√ß√£o de diret√≥rios
    print("\nüìÅ Criando diret√≥rios...")
    create_directories()
    
    print("\n‚úÖ Configura√ß√£o conclu√≠da!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Baixe manualmente o yolov3.weights (248MB):")
    print("   https://pjreddie.com/media/files/yolov3.weights")
    print("2. Execute o Spring Boot:")
    print("   ./mvnw spring-boot:run")
    print("3. Execute o detector:")
    print("   python detector.py")
    print("4. Acesse: http://localhost:8080/dashboard")

if __name__ == "__main__":
    main()
